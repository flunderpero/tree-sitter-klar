================================================================================
Function definition with block
================================================================================

fn test():
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block))))

================================================================================
Function definition with block and return statement
================================================================================

fn test() i32:
    return 42
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters)
        (type))
      (multi_block
        (return)
        (int)))))

================================================================================
Function definition with parameters, block, and binary expression return statement
================================================================================

fn test(mut x i32, y i32?) i32?:
    return x + y
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters
          (mut)
          (parameter
            (identifier)
            (type))
          (parameter
            (identifier)
            (type)))
        (type))
      (multi_block
        (return)
        (binary
          (identifier)
          (identifier))))))

================================================================================
Function definition with single expression
================================================================================

fn test() i32 => 42

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters)
        (type))
      (single_block
        (int)))))

================================================================================
Function definition with parameters and single expression
================================================================================

fn test(x i32, y i32) i32 => x < y

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters
          (parameter
            (identifier)
            (type))
          (parameter
            (identifier)
            (type)))
        (type))
      (single_block
        (binary
          (identifier)
          (identifier))))))

================================================================================
Functions inside functions
================================================================================

fn test():
    fn inner():
        let a = 1
    end
end


--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (declaration
          (function_declaration
            (function_signature
              (identifier)
              (parameters))
            (multi_block
              (variable_declaration
                (let)
                (identifier)
                (int)))))))))

================================================================================
Function type
================================================================================

fn test(f (fn(name str) i32)) (fn(name str) i32):
    return f
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters
          (parameter
            (identifier)
            (type
              (function_type
                (parameters
                  (parameter
                    (identifier)
                    (type)))
                (type)))))
        (type
          (function_type
            (parameters
              (parameter
                (identifier)
                (type)))
            (type))))
      (multi_block
        (return)
        (identifier)))))

================================================================================
Function calls
================================================================================

fn main():
    test()
    test("string", 42, some_variable, a == 10)
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (function_call
          (identifier)
          (function_call_args))
        (function_call
          (identifier)
          (function_call_args
            (string)
            (int)
            (identifier)
            (binary
              (identifier)
              (int))))))))

================================================================================
Array type and array literal
================================================================================

fn test(a [bool], b [MyType]) [i32] => [1, 2, 3]

fn test():
    let a [i32] = []
    let multi [[str]] = [["a", "b"], ["c", "d"]]
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters
          (parameter
            (identifier)
            (type))
          (parameter
            (identifier)
            (type
              (identifier))))
        (type))
      (single_block
        (array_literal
          (int)
          (int)
          (int)))))
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (let)
          (identifier)
          (type)
          (array_literal))
        (variable_declaration
          (let)
          (identifier)
          (type)
          (array_literal
            (array_literal
              (string)
              (string))
            (array_literal
              (string)
              (string))))))))

================================================================================
Comments
================================================================================

-- A line comment.
fn test():
    return -- A trailing comment.
    --- "aaa"
        A block comment.
        - Make sure we can put one or two dashes in a block comment.
        -- -- -- --
    ---
end -- A trailing comment.

--------------------------------------------------------------------------------

(source_file
  (comment)
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (return))
      (comment)
      (comment)))
  (comment))

================================================================================
String literal.
================================================================================

fn test():
    let a = "some string"
    let b = "\"escape\"\nsequences\\"
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (let)
          (identifier)
          (string))
        (variable_declaration
          (let)
          (identifier)
          (string
            (escape_sequence)
            (escape_sequence)
            (escape_sequence)
            (escape_sequence)))))))

================================================================================
Multiline string literal.
================================================================================

fn test():
    let a = """some " "" 
    multiline string"""
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (let)
          (identifier)
          (string))))))

================================================================================
Optional type in let.
================================================================================

fn test():
    let a str? = "some string"
    let b str? = None
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (let)
          (identifier)
          (type)
          (string))
        (variable_declaration
          (let)
          (identifier)
          (type)
          (identifier))))))

================================================================================
`let` without initialization.
================================================================================

fn test():
    let a str
    let b str?
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (let)
          (identifier)
          (type))
        (variable_declaration
          (let)
          (identifier)
          (type))))))

================================================================================
Variable declaration with `mut`.
================================================================================

fn test():
    mut a str = "some string"
    mut b str? = None
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (mut)
          (identifier)
          (type)
          (string))
        (variable_declaration
          (mut)
          (identifier)
          (type)
          (identifier))))))

================================================================================
`mut` without initialization.
================================================================================

fn test():
    mut a str
    mut b str?
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (mut)
          (identifier)
          (type))
        (variable_declaration
          (mut)
          (identifier)
          (type))))))

================================================================================
String interpolation.
================================================================================

fn test():
    let a = f"some string {a} {1 + 2}{person.name} \{escaped\}"
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (let)
          (identifier)
          (interpolated_string
            (identifier)
            (binary
              (int)
              (int))
            (member
              (identifier)
              (identifier))
            (escape_sequence)
            (escape_sequence)))))))

================================================================================
Multiline string interpolation.
================================================================================

fn test():
    let a = f"""some string 
    {a} {1 + 2}
    {person.name} \{escaped\}"""
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (let)
          (identifier)
          (interpolated_string
            (identifier)
            (binary
              (int)
              (int))
            (member
              (identifier)
              (identifier))
            (escape_sequence)
            (escape_sequence)))))))

================================================================================
Binary expression.
================================================================================

fn test():
    return 42 + 7 - 3
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (return)
        (binary
          (binary
            (int)
            (int))
          (int))))))

================================================================================
Conditional: if then
================================================================================

fn test() bool:
    if a == 42:
        return true
    end
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters)
        (type))
      (multi_block
        (if_then_else
          (binary
            (identifier)
            (int))
          (multi_block
            (return)
            (bool)))))))

================================================================================
Conditional: if then else
================================================================================

fn test() bool:
    if a == 42:
        return true
    else => return false
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters)
        (type))
      (multi_block
        (if_then_else
          (binary
            (identifier)
            (int))
          (multi_block
            (return)
            (bool))
          (single_block
            (return)))
        (bool)))))

================================================================================
Loops
================================================================================

fn test():
    let names = for x in people => x.name
    loop:
    end
    while a > 42 => a = a - 1
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (let)
          (identifier)
          (for
            (identifier)
            (identifier)
            (single_block
              (member
                (identifier)
                (identifier)))))
        (loop
          (multi_block))
        (while
          (binary
            (identifier)
            (int))
          (single_block
            (assignment
              (identifier)
              (binary
                (identifier)
                (int)))))))))

================================================================================
Structs
================================================================================

struct Person:
    name str
    age i32
    city str
end

fn main():
    struct InsideFunction:
        a i32
    end
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (struct
      (identifier)
      (field
        (identifier)
        (type))
      (field
        (identifier)
        (type))
      (field
        (identifier)
        (type))))
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (declaration
          (struct
            (identifier)
            (field
              (identifier)
              (type))))))))

================================================================================
Struct instantiation
================================================================================

fn main():
    let person = Person { name: "John", age, address: { city: "London" } }
end
--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (let)
          (identifier)
          (identifier))
        (struct_instantiation
          (struct_field_assignment
            (identifier)
            (string))
          (struct_field_assignment
            (identifier))
          (struct_field_assignment
            (identifier)
            (struct_instantiation
              (struct_field_assignment
                (identifier)
                (string)))))))))

================================================================================
Implementation block
================================================================================

impl Person:
    fn new(name str) Person:
        return Person(name)
    end

    fn greet(self):
        print(self.name)
    end
end

--------------------------------------------------------------------------------

(source_file
  (impl
    (identifier)
    (function_declaration
      (function_signature
        (identifier)
        (parameters
          (parameter
            (identifier)
            (type)))
        (type
          (identifier)))
      (multi_block
        (return)
        (function_call
          (identifier)
          (function_call_args
            (identifier)))))
    (function_declaration
      (function_signature
        (identifier)
        (parameters
          (self)))
      (multi_block
        (function_call
          (identifier)
          (function_call_args
            (member
              (identifier)
              (identifier))))))))

================================================================================
Trait
================================================================================

trait Greeter:
    fn greet(self)

    fn with_default_impl(self):
        print("Hello")
    end
end

--------------------------------------------------------------------------------

(source_file
  (trait
    (identifier)
    (function_signature
      (identifier)
      (parameters
        (self)))
    (function_declaration
      (function_signature
        (identifier)
        (parameters
          (self)))
      (multi_block
        (function_call
          (identifier)
          (function_call_args
            (string)))))))

================================================================================
Trait implementation
================================================================================

impl Greeter for Person:
    fn greet(self):
        print(self.name)
    end
end

--------------------------------------------------------------------------------

(source_file
  (impl
    (identifier)
    (identifier)
    (function_declaration
      (function_signature
        (identifier)
        (parameters
          (self)))
      (multi_block
        (function_call
          (identifier)
          (function_call_args
            (member
              (identifier)
              (identifier))))))))

================================================================================
Enums
================================================================================

enum Color:
    Red
    Green
    Blue
    Yellow(i32, i32)
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (enum
      (identifier)
      (enum_variant
        (identifier))
      (enum_variant
        (identifier))
      (enum_variant
        (identifier))
      (enum_variant
        (identifier)
        (type_list
          (type)
          (type))))))

================================================================================
Member access
================================================================================

fn main():
    let a = person.name
    person.name = "John"
    if person.name == "John":
        return person.full_name()
    end
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (variable_declaration
          (let)
          (identifier)
          (member
            (identifier)
            (identifier)))
        (assignment
          (member
            (identifier)
            (identifier))
          (string))
        (if_then_else
          (binary
            (member
              (identifier)
              (identifier))
            (string))
          (multi_block
            (return)
            (member
              (identifier)
              (function_call
                (identifier)
                (function_call_args)))))))))

================================================================================
Pattern matching.
================================================================================

fn main():
    match "Ok":
        "Ok" => print("Ok")
        "Error" => print("Error")
        else => print("Unknown")
    end
    let res = match "Ok":
        "Ok" => "Ok"
        else => "Unknown"
    end
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (function_signature
        (identifier)
        (parameters))
      (multi_block
        (match
          (string)
          (match_arm
            (string)
            (single_block
              (function_call
                (identifier)
                (function_call_args
                  (string)))))
          (match_arm
            (string)
            (single_block
              (function_call
                (identifier)
                (function_call_args
                  (string)))))
          (match_default_arm
            (single_block
              (function_call
                (identifier)
                (function_call_args
                  (string))))))
        (variable_declaration
          (let)
          (identifier)
          (match
            (string)
            (match_arm
              (string)
              (single_block
                (string)))
            (match_default_arm
              (single_block
                (string)))))))))
