================================================================================
Function definition with block
================================================================================

fn test():
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (multi_block))))

================================================================================
Function definition with block and return statement
================================================================================

fn test() i32:
    return 42
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (type)
      (multi_block
        (return)
        (int)))))

================================================================================
Function definition with parameters, block, and binary expression return statement
================================================================================

fn test(x i32, y i32) i32:
    return x + y
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters
        (parameter
          (identifier)
          (type))
        (parameter
          (identifier)
          (type)))
      (type)
      (multi_block
        (return)
        (binary
          (identifier)
          (identifier))))))

================================================================================
Function definition with single expression
================================================================================

fn test() i32 => 42

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (type)
      (single_block
        (int)))))

================================================================================
Function definition with parameters and single expression
================================================================================

fn test(x i32, y i32) i32 => x < y

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters
        (parameter
          (identifier)
          (type))
        (parameter
          (identifier)
          (type)))
      (type)
      (single_block
        (binary
          (identifier)
          (identifier))))))

================================================================================
Function calls
================================================================================

fn main():
    test()
    test("string", 42, some_variable, a == 10)
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (multi_block
        (function_call
          (identifier)
          (function_call_args))
        (function_call
          (identifier)
          (function_call_args
            (string)
            (int)
            (identifier)
            (binary
              (identifier)
              (int))))))))

================================================================================
Comments
================================================================================

-- A line comment.
fn test():
    return -- A trailing comment.
    --- "aaa"
        A block comment.
        - Make sure we can put one or two dashes in a block comment.
        -- -- -- --
    ---
end -- A trailing comment.

--------------------------------------------------------------------------------

(source_file
  (comment)
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (multi_block
        (return))
      (comment)
      (comment)))
  (comment))

================================================================================
String literal.
================================================================================

fn test():
    let a = "some string"
    let b = "\"escape\"\nsequences\\"
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (multi_block
        (let
          (identifier)
          (string))
        (let
          (identifier)
          (string
            (escape_sequence)
            (escape_sequence)
            (escape_sequence)
            (escape_sequence)))))))

================================================================================
Format string.
================================================================================

fn test():
    let a = f"some string {a} {1 + 2}{person.name} {{escaped}}"
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (multi_block
        (let
          (identifier)
          (format_string
            (format_string_part)
            (format_string_expr
              (identifier))
            (format_string_part)
            (format_string_expr
              (binary
                (int)
                (int)))
            (format_string_expr
              (member
                (identifier)
                (identifier)))
            (format_string_part)
            (format_string_part)
            (format_string_part)))))))

================================================================================
Binary expression.
================================================================================

fn test():
    return 42 + 7 - 3
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (multi_block
        (return)
        (binary
          (binary
            (int)
            (int))
          (int))))))

================================================================================
Conditional: if then
================================================================================

fn test() bool:
    if a == 42:
        return true
    end
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (type)
      (multi_block
        (if_then_else
          (binary
            (identifier)
            (int))
          (multi_block
            (return)
            (bool)))))))

================================================================================
Conditional: if then else
================================================================================

fn test() bool:
    if a == 42:
        return true
    else => return false
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (type)
      (multi_block
        (if_then_else
          (binary
            (identifier)
            (int))
          (multi_block
            (return)
            (bool))
          (single_block
            (return)))
        (bool)))))

================================================================================
Loops
================================================================================

fn test():
    let names = for x in people => x.name
    loop:
    end
    while a > 42 => a = a - 1
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (multi_block
        (let
          (identifier)
          (for
            (identifier)
            (identifier)
            (single_block
              (member
                (identifier)
                (identifier)))))
        (loop
          (multi_block))
        (while
          (binary
            (identifier)
            (int))
          (single_block
            (assignment
              (identifier)
              (binary
                (identifier)
                (int)))))))))

================================================================================
Structs
================================================================================

struct Person:
    name str
    age i32
    city str
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (struct
      (identifier)
      (field
        (identifier)
        (type))
      (field
        (identifier)
        (type))
      (field
        (identifier)
        (type)))))

================================================================================
Enums
================================================================================

enum Color:
    Red
    Green
    Blue
    Yellow(intensity i32, hue i32)
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (enum
      (identifier)
      (enum_variant
        (identifier))
      (enum_variant
        (identifier))
      (enum_variant
        (identifier))
      (enum_variant
        (identifier)
        (parameters
          (parameter
            (identifier)
            (type))
          (parameter
            (identifier)
            (type)))))))

================================================================================
Member access
================================================================================

fn main():
    let a = person.name
    person.name = "John"
    if person.name == "John":
        return person.full_name()
    end
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (multi_block
        (let
          (identifier)
          (member
            (identifier)
            (identifier)))
        (assignment
          (member
            (identifier)
            (identifier))
          (string))
        (if_then_else
          (binary
            (member
              (identifier)
              (identifier))
            (string))
          (multi_block
            (return)
            (member
              (identifier)
              (function_call
                (identifier)
                (function_call_args)))))))))

================================================================================
Pattern matching.
================================================================================

fn main():
    match "Ok":
        "Ok" => print("Ok")
        "Error" => print("Error")
        else => print("Unknown")
    end
    let res = match "Ok":
        "Ok" => "Ok"
        else => "Unknown"
    end
end

--------------------------------------------------------------------------------

(source_file
  (declaration
    (function_declaration
      (identifier)
      (parameters)
      (multi_block
        (match
          (string)
          (match_arm
            (string)
            (single_block
              (function_call
                (identifier)
                (function_call_args
                  (string)))))
          (match_arm
            (string)
            (single_block
              (function_call
                (identifier)
                (function_call_args
                  (string)))))
          (match_default_arm
            (single_block
              (function_call
                (identifier)
                (function_call_args
                  (string))))))
        (let
          (identifier)
          (match
            (string)
            (match_arm
              (string)
              (single_block
                (string)))
            (match_default_arm
              (single_block
                (string)))))))))
