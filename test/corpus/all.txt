================================================================================
Types in declarations
================================================================================

fn test(
    a i32,
    b bool,
    c str,
    d char,
    e Option<i32>,
    f Option<Result<i32, Option<str>>>
):
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (builtin_type)))
      (function_parameter
        (other_identifier)
        (type
          (builtin_type)))
      (function_parameter
        (other_identifier)
        (type
          (builtin_type)))
      (function_parameter
        (other_identifier)
        (type
          (builtin_type)))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)
          (type_parameters
            (type
              (builtin_type)))))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)
          (type_parameters
            (type
              (type_identifier)
              (type_parameters
                (type
                  (builtin_type))
                (type
                  (type_identifier)
                  (type_parameters
                    (type
                      (builtin_type))))))))))
    (block)))

================================================================================
Function definition with block
================================================================================

fn test():
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block)))

================================================================================
Generic function.
================================================================================

fn test<T>() i32:
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (type_parameters
        (type
          (type_identifier)))
      (type
        (builtin_type)))
    (block)))

================================================================================
Function definition with mutable and optional parameters and binary expression return statement
================================================================================

fn test(mut x i32, y i32?) i32?:
    return x < y
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (builtin_type)))
      (function_parameter
        (other_identifier)
        (type
          (builtin_type)))
      (type
        (builtin_type)))
    (block
      (statement
        (return_statement
          (expression
            (binary_expression
              (expression
                (other_identifier))
              (expression
                (other_identifier)))))))))

================================================================================
Function definition with single expression
================================================================================

fn test() i32 => 42

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (type
        (builtin_type)))
    (block
      (expression
        (int_literal)))))

================================================================================
Functions inside functions
================================================================================

fn test():
    fn inner():
        let a = 1
    end
end


--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (function_definition
        (function_declaration
          (other_identifier))
        (block
          (variable_declaration
            (other_identifier)
            (expression
              (int_literal))))))))

================================================================================
Anonymous functions (lambdas).
================================================================================

fn main():
    let f = fn(x i32) i32 => x + 1
    lef g = fn(x) => x + 1
    foo(fn(x i32) => x + 1)
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (expression
          (lambda_expression
            (lambda_parameter
              (other_identifier)
              (type
                (builtin_type)))
            (type
              (builtin_type))
            (block
              (expression
                (binary_expression
                  (expression
                    (other_identifier))
                  (expression
                    (int_literal))))))))
      (expression
        (other_identifier))
      (statement
        (assignment_statement
          (expression
            (other_identifier))
          (expression
            (lambda_expression
              (lambda_parameter
                (other_identifier))
              (block
                (expression
                  (binary_expression
                    (expression
                      (other_identifier))
                    (expression
                      (int_literal)))))))))
      (expression
        (call_expression
          (expression
            (other_identifier))
          (call_arguments
            (expression
              (lambda_expression
                (lambda_parameter
                  (other_identifier)
                  (type
                    (builtin_type)))
                (block
                  (expression
                    (binary_expression
                      (expression
                        (other_identifier))
                      (expression
                        (int_literal)))))))))))))

================================================================================
Return statement without expression (make sure the keyword `end` is not consumed)
================================================================================

fn test():
    if true:
        return
    end
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (expression
        (if_expression
          (expression
            (bool_literal))
          (block
            (statement
              (return_statement))))))))

================================================================================
Function type
================================================================================

fn test(func (fn(i32) i32)):
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (function_type
            (type
              (builtin_type))
            (type
              (builtin_type))))))
    (block)))

================================================================================
Function type with optional parameter
================================================================================

extern:
    fn a(f (fn(str?) i32)?) (fn(str) i32)?
end

--------------------------------------------------------------------------------

(source_file
  (extern_declaration
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (function_type
            (type
              (builtin_type))
            (type
              (builtin_type)))))
      (type
        (function_type
          (type
            (builtin_type))
          (type
            (builtin_type)))))))

================================================================================
Calls (function call, method call, enum instantiation)
================================================================================

fn main():
    test()
    test("string", 42, some_variable, a == 10)
    test<i32>(1)
    Foo<i32>(1)
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (expression
        (call_expression
          (expression
            (other_identifier))))
      (expression
        (call_expression
          (expression
            (other_identifier))
          (call_arguments
            (expression
              (string_literal))
            (expression
              (int_literal))
            (expression
              (other_identifier))
            (expression
              (binary_expression
                (expression
                  (other_identifier))
                (expression
                  (int_literal)))))))
      (expression
        (call_expression
          (expression
            (other_identifier))
          (type_parameters
            (type
              (builtin_type)))
          (call_arguments
            (expression
              (int_literal)))))
      (expression
        (call_expression
          (type
            (type_identifier)
            (type_parameters
              (type
                (builtin_type))))
          (call_arguments
            (expression
              (int_literal))))))))

================================================================================
Array type and array literal
================================================================================

fn test(a [bool], b [MyType]) [i32] => [1, 2, 3]

fn test():
    let a [i32] = []
    let multi [[str]] = [["a", "b"], ["c", "d"]]
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (array_type
            (type
              (builtin_type)))))
      (function_parameter
        (other_identifier)
        (type
          (array_type
            (type
              (type_identifier)))))
      (type
        (array_type
          (type
            (builtin_type)))))
    (block
      (expression
        (array_literal
          (expression
            (int_literal))
          (expression
            (int_literal))
          (expression
            (int_literal))))))
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (type
          (array_type
            (type
              (builtin_type))))
        (expression
          (array_literal)))
      (variable_declaration
        (other_identifier)
        (type
          (array_type
            (type
              (array_type
                (type
                  (builtin_type))))))
        (expression
          (array_literal
            (expression
              (array_literal
                (expression
                  (string_literal))
                (expression
                  (string_literal))))
            (expression
              (array_literal
                (expression
                  (string_literal))
                (expression
                  (string_literal))))))))))

================================================================================
Comments
================================================================================

fn test():
    some_expression
    -- A line comment.
    some_expression -- A trailing comment.
    --- "aaa"
        A block comment.
        - Make sure we can add a dash or two: -- 
    ---
    some_expression
    --- Another block comment.
    ---
    some_expression
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (expression
        (other_identifier))
      (comment)
      (expression
        (other_identifier))
      (comment)
      (comment)
      (expression
        (other_identifier))
      (comment)
      (expression
        (other_identifier)))))

================================================================================
Char literal
================================================================================

fn test():
    let a = 'a'
    let b = '\n'
    let c = '\''
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (expression
          (char_literal)))
      (variable_declaration
        (other_identifier)
        (expression
          (char_literal
            (escape_sequence))))
      (variable_declaration
        (other_identifier)
        (expression
          (char_literal
            (escape_sequence)))))))

================================================================================
Boolean literal
================================================================================

fn test() ():
    true
    false
end
--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (unit))
    (block
      (expression
        (bool_literal))
      (expression
        (bool_literal)))))

================================================================================
Unit type and unit literal
================================================================================

fn test() ():
    Option<()>.Some(())
    ()
end
--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (unit))
    (block
      (expression
        (field_access_expression
          (type
            (type_identifier)
            (type_parameters
              (unit)))
          (field_access_field_expression
            (call_expression
              (type
                (type_identifier))
              (call_arguments
                (expression
                  (unit)))))))
      (expression
        (unit)))))

================================================================================
Tuple literal
================================================================================

fn test():
    let c = (1,)
    let a = (1, 2, 3, Test{a: 1}, function_call())
    let b = ("a", 'b', EnumVariant(3), [1, 2])
end
--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (expression
          (tuple_literal
            (expression
              (int_literal)))))
      (variable_declaration
        (other_identifier)
        (expression
          (tuple_literal
            (expression
              (int_literal))
            (expression
              (int_literal))
            (expression
              (int_literal))
            (expression
              (struct_instantiation_expression
                (type
                  (type_identifier))
                (struct_field_assignment
                  (other_identifier)
                  (expression
                    (int_literal)))))
            (expression
              (call_expression
                (expression
                  (other_identifier)))))))
      (variable_declaration
        (other_identifier)
        (expression
          (tuple_literal
            (expression
              (string_literal))
            (expression
              (char_literal))
            (expression
              (call_expression
                (type
                  (type_identifier))
                (call_arguments
                  (expression
                    (int_literal)))))
            (expression
              (array_literal
                (expression
                  (int_literal))
                (expression
                  (int_literal))))))))))

================================================================================
Tuple, function call, and unit type ambiguity
================================================================================

fn test():
    some_expression
    (1, 2)
    function_call.
        over
        .
        multiple_lines
        .still_works() 
    ()
end
--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (expression
        (other_identifier))
      (expression
        (tuple_literal
          (expression
            (int_literal))
          (expression
            (int_literal))))
      (expression
        (call_expression
          (expression
            (field_access_expression
              (expression
                (field_access_expression
                  (expression
                    (field_access_expression
                      (expression
                        (other_identifier))
                      (field_access_field_expression
                        (other_identifier))))
                  (field_access_field_expression
                    (other_identifier))))
              (field_access_field_expression
                (other_identifier))))))
      (expression
        (unit)))))

================================================================================
String literal
================================================================================

fn test():
    "some string"
    "\"escape\"\nsequences\\"
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (expression
        (string_literal))
      (expression
        (string_literal
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence))))))

================================================================================
Multiline string literal.
================================================================================

fn test():
    """some " "" 
    \n
    multiline string"""
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (expression
        (string_literal
          (escape_sequence))))))

================================================================================
Optional type in let.
================================================================================

fn test():
    let a str = "some string"
    let b str? = None
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (type
          (builtin_type))
        (expression
          (string_literal)))
      (variable_declaration
        (other_identifier)
        (type
          (builtin_type))
        (expression
          (type_identifier))))))

================================================================================
Variable declaration with `mut`.
================================================================================

fn test():
    mut a str = "some string"
    mut b str? = None
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (type
          (builtin_type))
        (expression
          (string_literal)))
      (variable_declaration
        (other_identifier)
        (type
          (builtin_type))
        (expression
          (type_identifier))))))

================================================================================
String interpolation.
================================================================================

fn test():
    let a = f"some string {a} {1 + 2}{person.name} \{escaped\}"
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (expression
          (f_string_expression
            (expression
              (other_identifier))
            (expression
              (binary_expression
                (expression
                  (int_literal))
                (expression
                  (int_literal))))
            (expression
              (field_access_expression
                (expression
                  (other_identifier))
                (field_access_field_expression
                  (other_identifier))))
            (escape_sequence)
            (escape_sequence)))))))

================================================================================
Multiline string interpolation.
================================================================================

fn test():
    let a = f"""some string 
    {a} {1 + 2}
    {person.name} \{escaped\}"""
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (expression
          (f_string_expression
            (expression
              (other_identifier))
            (expression
              (binary_expression
                (expression
                  (int_literal))
                (expression
                  (int_literal))))
            (expression
              (field_access_expression
                (expression
                  (other_identifier))
                (field_access_field_expression
                  (other_identifier))))
            (escape_sequence)
            (escape_sequence)))))))

================================================================================
Binary expression
================================================================================

fn test():
    42 + 7 - 3 * 2 / 1 < 10
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (expression
        (binary_expression
          (expression
            (binary_expression
              (expression
                (binary_expression
                  (expression
                    (int_literal))
                  (expression
                    (int_literal))))
              (expression
                (binary_expression
                  (expression
                    (binary_expression
                      (expression
                        (int_literal))
                      (expression
                        (int_literal))))
                  (expression
                    (int_literal))))))
          (expression
            (int_literal)))))))

================================================================================
Unary expression
================================================================================

fn test():
    not true or false
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (expression
        (binary_expression
          (expression
            (unary_expression
              (expression
                (bool_literal))))
          (expression
            (bool_literal)))))))

================================================================================
Conditional: if then
================================================================================

fn test() bool:
    if true:
        true
    end
    if false => false
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (type
        (builtin_type)))
    (block
      (expression
        (if_expression
          (expression
            (bool_literal))
          (block
            (expression
              (bool_literal)))))
      (expression
        (if_expression
          (expression
            (bool_literal))
          (block
            (expression
              (bool_literal))))))))

================================================================================
Conditional: if then else
================================================================================

fn test() bool:
    if true:
        true
    else => false
    if true => true
    else:
        false
    end
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (type
        (builtin_type)))
    (block
      (expression
        (if_expression
          (expression
            (bool_literal))
          (expression
            (bool_literal))
          (block
            (expression
              (bool_literal)))))
      (expression
        (if_expression
          (expression
            (bool_literal))
          (expression
            (bool_literal))
          (block
            (expression
              (bool_literal))))))))

================================================================================
Loops
================================================================================

fn test():
    for x in people => x.name
    loop:
        break
        continue
    end
    while a > 42 => a = a - 1
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (statement
        (for_statement
          (other_identifier)
          (expression
            (other_identifier))
          (loop_block
            (expression
              (field_access_expression
                (expression
                  (other_identifier))
                (field_access_field_expression
                  (other_identifier)))))))
      (statement
        (loop_statement
          (loop_block
            (break_statement)
            (continue_statement))))
      (statement
        (while_statement
          (expression
            (binary_expression
              (expression
                (other_identifier))
              (expression
                (int_literal))))
          (loop_block
            (statement
              (assignment_statement
                (expression
                  (other_identifier))
                (expression
                  (binary_expression
                    (expression
                      (other_identifier))
                    (expression
                      (int_literal))))))))))))

================================================================================
Structs
================================================================================

struct Person:
    name str
    age i32
    city str
end

fn main():
    struct InsideFunction:
        a i32
    end
end

--------------------------------------------------------------------------------

(source_file
  (struct_declaration
    (type
      (type_identifier))
    (struct_field
      (other_identifier)
      (type
        (builtin_type)))
    (struct_field
      (other_identifier)
      (type
        (builtin_type)))
    (struct_field
      (other_identifier)
      (type
        (builtin_type))))
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (struct_declaration
        (type
          (type_identifier))
        (struct_field
          (other_identifier)
          (type
            (builtin_type)))))))

================================================================================
Struct instantiation
================================================================================

fn main():
    let person = Person { name: "John", age, address: { city: "London" } }
end
--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (expression
          (struct_instantiation_expression
            (type
              (type_identifier))
            (struct_field_assignment
              (other_identifier)
              (expression
                (string_literal)))
            (struct_field_assignment
              (other_identifier))
            (struct_field_assignment
              (other_identifier)
              (expression
                (struct_instantiation_expression
                  (struct_field_assignment
                    (other_identifier)
                    (expression
                      (string_literal))))))))))))

================================================================================
Generics
================================================================================

struct Foo<T>:
    a T
end

impl Bar<T> for Foo<T>:
    fn new() Foo<T>:
    end
end

enum Option<T>:
    Some(T)
    None
end

trait Foo<A, B>:
end

fn foo<T, U>(a T, b U) T:
    let a = Option<i32>.Some(1)
    return a
end

--------------------------------------------------------------------------------

(source_file
  (struct_declaration
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (struct_field
      (other_identifier)
      (type
        (type_identifier))))
  (impl_definition
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (function_definition
      (function_declaration
        (other_identifier)
        (type
          (type_identifier)
          (type_parameters
            (type
              (type_identifier)))))
      (block)))
  (enum_declaration
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (enum_variant_declaration
      (type_identifier)
      (type
        (type_identifier)))
    (enum_variant_declaration
      (type_identifier)))
  (trait_definition
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))
        (type
          (type_identifier)))))
  (function_definition
    (function_declaration
      (other_identifier)
      (type_parameters
        (type
          (type_identifier))
        (type
          (type_identifier)))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (type
        (type_identifier)))
    (block
      (variable_declaration
        (other_identifier)
        (expression
          (field_access_expression
            (type
              (type_identifier)
              (type_parameters
                (type
                  (builtin_type))))
            (field_access_field_expression
              (call_expression
                (type
                  (type_identifier))
                (call_arguments
                  (expression
                    (int_literal))))))))
      (statement
        (return_statement
          (expression
            (other_identifier)))))))

================================================================================
Implementation definition
================================================================================

impl Person:
    fn new(name str) Person:
        Person(name)
    end

    fn greet(self):
        print(self.name)
    end
end

--------------------------------------------------------------------------------

(source_file
  (impl_definition
    (type
      (type_identifier))
    (function_definition
      (function_declaration
        (other_identifier)
        (function_parameter
          (other_identifier)
          (type
            (builtin_type)))
        (type
          (type_identifier)))
      (block
        (expression
          (call_expression
            (type
              (type_identifier))
            (call_arguments
              (expression
                (other_identifier)))))))
    (function_definition
      (function_declaration
        (other_identifier)
        (function_parameter
          (self)))
      (block
        (expression
          (call_expression
            (expression
              (other_identifier))
            (call_arguments
              (expression
                (field_access_expression
                  (expression
                    (other_identifier))
                  (field_access_field_expression
                    (other_identifier)))))))))))

================================================================================
Traits
================================================================================

trait Greeter:
    fn greet_every_one(self) (fn(str) str)

    fn greet(self) 

    fn with_default_impl(self):
        print("Hello")
    end
end

--------------------------------------------------------------------------------

(source_file
  (trait_definition
    (type
      (type_identifier))
    (function_declaration
      (other_identifier)
      (function_parameter
        (self))
      (type
        (function_type
          (type
            (builtin_type))
          (type
            (builtin_type)))))
    (function_declaration
      (other_identifier)
      (function_parameter
        (self)))
    (function_definition
      (function_declaration
        (other_identifier)
        (function_parameter
          (self)))
      (block
        (expression
          (call_expression
            (expression
              (other_identifier))
            (call_arguments
              (expression
                (string_literal)))))))))

================================================================================
Traits inside functions.
================================================================================

fn test():
    trait Greeter:
        fn greet(self) str 
    end
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (trait_definition
        (type
          (type_identifier))
        (function_declaration
          (other_identifier)
          (function_parameter
            (self))
          (type
            (builtin_type)))))))

================================================================================
Trait implementation
================================================================================

impl Greeter<K> for Person<K>:
    fn greet(self):
        print(self.name)
    end
end

--------------------------------------------------------------------------------

(source_file
  (impl_definition
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (function_definition
      (function_declaration
        (other_identifier)
        (function_parameter
          (self)))
      (block
        (expression
          (call_expression
            (expression
              (other_identifier))
            (call_arguments
              (expression
                (field_access_expression
                  (expression
                    (other_identifier))
                  (field_access_field_expression
                    (other_identifier)))))))))))

================================================================================
Enums
================================================================================

enum Color:
    Red
    Green
    Blue
    Yellow(i32, i32)
end

--------------------------------------------------------------------------------

(source_file
  (enum_declaration
    (type
      (type_identifier))
    (enum_variant_declaration
      (type_identifier))
    (enum_variant_declaration
      (type_identifier))
    (enum_variant_declaration
      (type_identifier))
    (enum_variant_declaration
      (type_identifier)
      (type
        (builtin_type))
      (type
        (builtin_type)))))

================================================================================
Field access
================================================================================

fn main():
    let a = person.name
    person.name = "John"
    person.name == "John"
    person.full_name().to_str().test
    Enum.Variant
    Enum<Type>.Variant<Type>(1)
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (expression
          (field_access_expression
            (expression
              (other_identifier))
            (field_access_field_expression
              (other_identifier)))))
      (statement
        (assignment_statement
          (expression
            (field_access_expression
              (expression
                (other_identifier))
              (field_access_field_expression
                (other_identifier))))
          (expression
            (string_literal))))
      (expression
        (binary_expression
          (expression
            (field_access_expression
              (expression
                (other_identifier))
              (field_access_field_expression
                (other_identifier))))
          (expression
            (string_literal))))
      (expression
        (field_access_expression
          (expression
            (call_expression
              (expression
                (field_access_expression
                  (expression
                    (call_expression
                      (expression
                        (field_access_expression
                          (expression
                            (other_identifier))
                          (field_access_field_expression
                            (other_identifier))))))
                  (field_access_field_expression
                    (other_identifier))))))
          (field_access_field_expression
            (other_identifier))))
      (expression
        (field_access_expression
          (type
            (type_identifier))
          (field_access_field_expression
            (type
              (type_identifier)))))
      (expression
        (call_expression
          (expression
            (field_access_expression
              (type
                (type_identifier)
                (type_parameters
                  (type
                    (type_identifier))))
              (field_access_field_expression
                (type
                  (type_identifier)))))
          (type_parameters
            (type
              (type_identifier)))
          (call_arguments
            (expression
              (int_literal))))))))

================================================================================
Pattern matching
================================================================================

fn main():
    match some_expression:
        'a'..<'z' => 1
        1 => 1
        'a' => 1
        "string" => 1
        true => 1
        [1, 2] => 1
        (1, 2) => 1
        1..10 => 1
        a => 1
        1 | 'a' | "string" => 1
        Struct{a: 1} => 1
        Enum => 1 
        Enum(1, _) => 1
        1 | 2..10 | 'a' => 1
        _:
            "a multi-expression block"
        end
    end
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (expression
        (match_expression
          (expression
            (other_identifier))
          (match_arm
            (pattern
              (range_pattern
                (range_pattern_literal
                  (char_literal))
                (range_pattern_literal
                  (char_literal))))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (int_literal))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (char_literal))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (string_literal))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (bool_literal))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (array_pattern
                (pattern
                  (int_literal))
                (pattern
                  (int_literal))))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (tuple_pattern
                (pattern
                  (int_literal))
                (pattern
                  (int_literal))))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (range_pattern
                (range_pattern_literal
                  (int_literal))
                (range_pattern_literal
                  (int_literal))))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (other_identifier))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (int_literal))
            (pattern
              (char_literal))
            (pattern
              (string_literal))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (struct_pattern
                (type
                  (type_identifier))
                (struct_pattern_field
                  (other_identifier)
                  (pattern
                    (int_literal)))))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (enum_pattern
                (type
                  (type_identifier))))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (enum_pattern
                (type
                  (type_identifier))
                (pattern
                  (int_literal))
                (pattern
                  (wildcard_pattern))))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (int_literal))
            (pattern
              (range_pattern
                (range_pattern_literal
                  (int_literal))
                (range_pattern_literal
                  (int_literal))))
            (pattern
              (char_literal))
            (block
              (expression
                (int_literal))))
          (match_arm
            (pattern
              (wildcard_pattern))
            (block
              (expression
                (string_literal)))))))))

================================================================================
Extern declaration
================================================================================

extern:
    fn a(s str) str
    fn b(b i32)
    struct Foo:
        a i32
    end
    impl Foo:
        fn new() Foo
    end
    impl ToStr for Foo
end

--------------------------------------------------------------------------------

(source_file
  (extern_declaration
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (builtin_type)))
      (type
        (builtin_type)))
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (builtin_type))))
    (struct_declaration
      (type
        (type_identifier))
      (struct_field
        (other_identifier)
        (type
          (builtin_type))))
    (extern_impl_declaration
      (type
        (type_identifier))
      (function_declaration
        (other_identifier)
        (type
          (type_identifier))))
    (extern_impl_declaration
      (type
        (type_identifier))
      (type
        (type_identifier)))))

================================================================================
Types don't clash with less-than operator.
================================================================================

fn test<T>():
    Foo<i32>{a: 1}
    test<Foo<i32>>(a < b)
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (block
      (expression
        (struct_instantiation_expression
          (type
            (type_identifier)
            (type_parameters
              (type
                (builtin_type))))
          (struct_field_assignment
            (other_identifier)
            (expression
              (int_literal)))))
      (expression
        (call_expression
          (expression
            (other_identifier))
          (type_parameters
            (type
              (type_identifier)
              (type_parameters
                (type
                  (builtin_type)))))
          (call_arguments
            (expression
              (binary_expression
                (expression
                  (other_identifier))
                (expression
                  (other_identifier))))))))))
