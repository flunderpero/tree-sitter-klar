================================================================================
Types in declarations
================================================================================

fn test(
    a Int,
    b Bool,
    c Str,
    d Char,
    e Option<I8>,
    f Option<Result<F32, Option<Str>>>
):
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)
          (type_parameters
            (type
              (type_identifier)))))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)
          (type_parameters
            (type
              (type_identifier)
              (type_parameters
                (type
                  (type_identifier))
                (type
                  (type_identifier)
                  (type_parameters
                    (type
                      (type_identifier))))))))))
    (block)))

================================================================================
Use statement
================================================================================

use .my.local.module

use std.collection.List

use Enum.Variant as SomeOtherName

use Enum.*

--------------------------------------------------------------------------------

(source_file
  (use_declaration
    (use_path
      (other_identifier)
      (other_identifier)
      (other_identifier)))
  (use_declaration
    (use_path
      (other_identifier)
      (other_identifier)
      (type_identifier)))
  (use_declaration
    (use_path
      (type_identifier)
      (type_identifier))
    (type_identifier))
  (use_declaration
    (use_path
      (type_identifier))))

================================================================================
Function definition with block
================================================================================

fn test():
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block)))

================================================================================
Generic function.
================================================================================

fn test<T>() Int:
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (type_parameters
        (type
          (type_identifier)))
      (type
        (type_identifier)))
    (block)))

================================================================================
Function definition with mutable and optional parameters and binary expression return statement
================================================================================

fn test(mut x Int, y Int?) Int?:
    return x< y
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (type
        (type_identifier)))
    (block
      (statement
        (return_statement
          (binary_expression
            (other_identifier)
            (other_identifier)))))))

================================================================================
Function definition with single expression
================================================================================

fn test() Int => 42

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (type
        (type_identifier)))
    (block
      (int_literal))))

================================================================================
Functions inside functions
================================================================================

fn test():
    fn inner():
        let a = 1
    end
end


--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (function_definition
        (function_declaration
          (other_identifier))
        (block
          (variable_declaration
            (other_identifier)
            (int_literal)))))))

================================================================================
Functions that throw (throws keyword)
================================================================================

fn divide(dividend Int, divisor Int) Int throws:
end

fn custom_error() throws MyError:
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (type
        (type_identifier)))
    (block))
  (function_definition
    (function_declaration
      (other_identifier)
      (type
        (type_identifier)))
    (block)))

================================================================================
Anonymous functions (lambdas).
================================================================================

fn main():
    let f = fn(x Int) Int => x + 1
    lef g = fn(x) => x + 1
    foo(fn(x Int) => x + 1)
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (lambda_expression
          (lambda_parameter
            (other_identifier)
            (type
              (type_identifier)))
          (type
            (type_identifier))
          (block
            (binary_expression
              (other_identifier)
              (int_literal)))))
      (other_identifier)
      (statement
        (assignment_statement
          (other_identifier)
          (lambda_expression
            (lambda_parameter
              (other_identifier))
            (block
              (binary_expression
                (other_identifier)
                (int_literal))))))
      (call_expression
        (other_identifier)
        (call_arguments
          (lambda_expression
            (lambda_parameter
              (other_identifier)
              (type
                (type_identifier)))
            (block
              (binary_expression
                (other_identifier)
                (int_literal)))))))))

================================================================================
Return statement without expression (make sure the keyword `end` is not consumed)
================================================================================

fn test():
    if true:
        return
    end
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (if_expression
        (bool_literal)
        (block
          (statement
            (return_statement)))))))

================================================================================
Function type
================================================================================

fn test(func (fn(Int) Int)):
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (function_type
            (type
              (type_identifier))
            (type
              (type_identifier))))))
    (block)))

================================================================================
Function type with optional parameter
================================================================================

extern:
    fn a(f (fn(Str?) Int)?) (fn(Str) Int)?
end

--------------------------------------------------------------------------------

(source_file
  (extern_declaration
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (function_type
            (type
              (type_identifier))
            (type
              (type_identifier)))))
      (type
        (function_type
          (type
            (type_identifier))
          (type
            (type_identifier)))))))

================================================================================
Calls (function call, method call, enum instantiation)
================================================================================

fn main():
    test()
    test.foo()
    test()(1)
    test("string", 42, some_variable, a == 10)
    test<Int>(1)
    Foo<Int>(1)
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (call_expression
        (other_identifier)
        (call_arguments))
      (call_expression
        (field_expression
          (other_identifier)
          (other_identifier))
        (call_arguments))
      (call_expression
        (call_expression
          (other_identifier)
          (call_arguments))
        (call_arguments
          (int_literal)))
      (call_expression
        (other_identifier)
        (call_arguments
          (string_literal)
          (int_literal)
          (other_identifier)
          (binary_expression
            (other_identifier)
            (int_literal))))
      (call_expression
        (other_identifier)
        (type_parameters
          (type
            (type_identifier)))
        (call_arguments
          (int_literal)))
      (call_expression
        (type
          (type_identifier)
          (type_parameters
            (type
              (type_identifier))))
        (call_arguments
          (int_literal))))))

================================================================================
Array type and array literal
================================================================================

fn test(a [Bool], b [MyType]) [Int] => [1, 2, 3]

fn test():
    let a [Int] = []
    let multi [[Str]] = [["a", "b"], ["c", "d"]]
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (array_type
            (type
              (type_identifier)))))
      (function_parameter
        (other_identifier)
        (type
          (array_type
            (type
              (type_identifier)))))
      (type
        (array_type
          (type
            (type_identifier)))))
    (block
      (array_literal
        (int_literal)
        (int_literal)
        (int_literal))))
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (type
          (array_type
            (type
              (type_identifier))))
        (array_literal))
      (variable_declaration
        (other_identifier)
        (type
          (array_type
            (type
              (array_type
                (type
                  (type_identifier))))))
        (array_literal
          (array_literal
            (string_literal)
            (string_literal))
          (array_literal
            (string_literal)
            (string_literal)))))))

================================================================================
Indexed access
================================================================================

fn test():
    a[1]
    a[1][foo()]
    a[1] = 1
    print(arr[0])
    print(arr[0][1])
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (index_expression
        (other_identifier)
        (int_literal))
      (index_expression
        (index_expression
          (other_identifier)
          (int_literal))
        (call_expression
          (other_identifier)
          (call_arguments)))
      (statement
        (assignment_statement
          (index_expression
            (other_identifier)
            (int_literal))
          (int_literal)))
      (call_expression
        (other_identifier)
        (call_arguments
          (index_expression
            (other_identifier)
            (int_literal))))
      (call_expression
        (other_identifier)
        (call_arguments
          (index_expression
            (index_expression
              (other_identifier)
              (int_literal))
            (int_literal)))))))

================================================================================
Comments
================================================================================

fn test():
    some_expression
    -- A line comment.
    some_expression -- A trailing comment.
    --- "aaa"
        A block comment.
        - Make sure we can add a dash or two: -- 
    ---
    some_expression
    --- Another block comment.
    ---
    some_expression
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (other_identifier)
      (comment)
      (other_identifier)
      (comment)
      (comment)
      (other_identifier)
      (comment)
      (other_identifier))))

================================================================================
Char literal
================================================================================

fn test():
    let a = 'a'
    let b = '\n'
    let c = '\''
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (char_literal))
      (variable_declaration
        (other_identifier)
        (char_literal
          (escape_sequence)))
      (variable_declaration
        (other_identifier)
        (char_literal
          (escape_sequence))))))

================================================================================
Boolean literal
================================================================================

fn test() ():
    true
    false
end
--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (unit))
    (block
      (bool_literal)
      (bool_literal))))

================================================================================
Unit type and unit literal
================================================================================

fn test() ():
    Option<()>.Some(())
    ()
end
--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (unit))
    (block
      (field_expression
        (type
          (type_identifier)
          (type_parameters
            (unit)))
        (call_expression
          (type
            (type_identifier))
          (call_arguments
            (unit))))
      (unit))))

================================================================================
Tuple type
================================================================================

fn test(a (Int, Str)) (Int,):
    let a (Int, Str) = (1, "a")
end
--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (tuple_type
            (type
              (type_identifier))
            (type
              (type_identifier)))))
      (type
        (tuple_type
          (type
            (type_identifier)))))
    (block
      (variable_declaration
        (other_identifier)
        (type
          (tuple_type
            (type
              (type_identifier))
            (type
              (type_identifier))))
        (tuple_literal
          (int_literal)
          (string_literal))))))

================================================================================
Tuple literal
================================================================================

fn test():
    let c = (1,)
    let a = (1, 2, 3, Test{a: 1}, function_call())
    let b = ("a", 'b', EnumVariant(3), [1, 2])
end
--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (tuple_literal
          (int_literal)))
      (variable_declaration
        (other_identifier)
        (tuple_literal
          (int_literal)
          (int_literal)
          (int_literal)
          (struct_instantiation_expression
            (type
              (type_identifier))
            (struct_field_assignment
              (other_identifier)
              (int_literal)))
          (call_expression
            (other_identifier)
            (call_arguments))))
      (variable_declaration
        (other_identifier)
        (tuple_literal
          (string_literal)
          (char_literal)
          (call_expression
            (type
              (type_identifier))
            (call_arguments
              (int_literal)))
          (array_literal
            (int_literal)
            (int_literal)))))))

================================================================================
Tuple, function call, and unit type ambiguity
================================================================================

fn test():
    some_expression
    (1, 2)
    function_call.
        over
        .
        multiple_lines
        .still_works() 
    ()
end
--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (other_identifier)
      (tuple_literal
        (int_literal)
        (int_literal))
      (call_expression
        (field_expression
          (field_expression
            (field_expression
              (other_identifier)
              (other_identifier))
            (other_identifier))
          (other_identifier))
        (call_arguments))
      (unit))))

================================================================================
String literal
================================================================================

fn test():
    "some string"
    "\"escape\"\nsequences\\"
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (string_literal)
      (string_literal
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)))))

================================================================================
Multiline string literal.
================================================================================

fn test():
    """some " "" 
    \n
    multiline string"""
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (string_literal
        (escape_sequence)))))

================================================================================
Optional type in let.
================================================================================

fn test():
    let a Str = "some string"
    let b Str? = None
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (type
          (type_identifier))
        (string_literal))
      (variable_declaration
        (other_identifier)
        (type
          (type_identifier))
        (type_identifier)))))

================================================================================
Variable declaration with `mut`.
================================================================================

fn test():
    mut a Str = "some string"
    mut b Str? = None
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (type
          (type_identifier))
        (string_literal))
      (variable_declaration
        (other_identifier)
        (type
          (type_identifier))
        (type_identifier)))))

================================================================================
String interpolation.
================================================================================

fn test():
    let a = f"some string {a} {1 + 2}{person.name} \{escaped\}"
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (f_string_expression
          (f_string_interpolation
            (other_identifier))
          (f_string_interpolation
            (binary_expression
              (int_literal)
              (int_literal)))
          (f_string_interpolation
            (field_expression
              (other_identifier)
              (other_identifier)))
          (escape_sequence)
          (escape_sequence))))))

================================================================================
Multiline string interpolation.
================================================================================

fn test():
    let a = f"""some string 
    {a} {1 + 2}
    {person.name} \{escaped\}"""
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (f_string_expression
          (f_string_interpolation
            (other_identifier))
          (f_string_interpolation
            (binary_expression
              (int_literal)
              (int_literal)))
          (f_string_interpolation
            (field_expression
              (other_identifier)
              (other_identifier)))
          (escape_sequence)
          (escape_sequence))))))

================================================================================
Binary expression
================================================================================

fn test():
    x < y
    42 + 7 - 3 * 2 / 1 < 10
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (binary_expression
        (other_identifier)
        (other_identifier))
      (binary_expression
        (binary_expression
          (binary_expression
            (int_literal)
            (int_literal))
          (binary_expression
            (binary_expression
              (int_literal)
              (int_literal))
            (int_literal)))
        (int_literal)))))

================================================================================
Unary expression
================================================================================

fn test():
    not true or false
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (binary_expression
        (unary_expression
          (bool_literal))
        (bool_literal)))))

================================================================================
Conditional: if then
================================================================================

fn test() Bool:
    if true:
        true
    end
    if false => false
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (type
        (type_identifier)))
    (block
      (if_expression
        (bool_literal)
        (block
          (bool_literal)))
      (if_expression
        (bool_literal)
        (block
          (bool_literal))))))

================================================================================
Conditional: if then else
================================================================================

fn test() Bool:
    if true:
        true
    else => false
    if true => true
    else:
        false
    end
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (type
        (type_identifier)))
    (block
      (if_expression
        (bool_literal)
        (bool_literal)
        (block
          (bool_literal)))
      (if_expression
        (bool_literal)
        (bool_literal)
        (block
          (bool_literal))))))

================================================================================
Loops
================================================================================

fn test():
    for x in people => x.name
    loop:
        break
        continue
    end
    while a > 42 => a = a - 1
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (statement
        (for_statement
          (other_identifier)
          (other_identifier)
          (loop_block
            (field_expression
              (other_identifier)
              (other_identifier)))))
      (statement
        (loop_statement
          (loop_block
            (break_statement)
            (continue_statement))))
      (statement
        (while_statement
          (binary_expression
            (other_identifier)
            (int_literal))
          (loop_block
            (statement
              (assignment_statement
                (other_identifier)
                (binary_expression
                  (other_identifier)
                  (int_literal))))))))))

================================================================================
Structs
================================================================================

struct Person:
    name Str
    age Int
    city Str
end

fn main():
    struct InsideFunction:
        a Int
    end
end

--------------------------------------------------------------------------------

(source_file
  (struct_declaration
    (type
      (type_identifier))
    (struct_field
      (other_identifier)
      (type
        (type_identifier)))
    (struct_field
      (other_identifier)
      (type
        (type_identifier)))
    (struct_field
      (other_identifier)
      (type
        (type_identifier))))
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (struct_declaration
        (type
          (type_identifier))
        (struct_field
          (other_identifier)
          (type
            (type_identifier)))))))

================================================================================
Struct instantiation
================================================================================

fn main():
    let person = Person { name: "John", age, address: { city: "London" } }
end
--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (struct_instantiation_expression
          (type
            (type_identifier))
          (struct_field_assignment
            (other_identifier)
            (string_literal))
          (struct_field_assignment
            (other_identifier))
          (struct_field_assignment
            (other_identifier)
            (struct_instantiation_expression
              (struct_field_assignment
                (other_identifier)
                (string_literal)))))))))

================================================================================
Generics
================================================================================

struct Foo<T>:
    a T
end

impl Bar<T> for Foo<T>:
    fn new() Foo<T>:
    end
end

enum Option<T>:
    Some(T)
    None
end

trait Foo<A, B>:
end

fn foo<T, U>(a T, b U) T:
    let a = Option<Int>.Some(1)
    return a
end

--------------------------------------------------------------------------------

(source_file
  (struct_declaration
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (struct_field
      (other_identifier)
      (type
        (type_identifier))))
  (impl_definition
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (function_definition
      (function_declaration
        (other_identifier)
        (type
          (type_identifier)
          (type_parameters
            (type
              (type_identifier)))))
      (block)))
  (enum_declaration
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (enum_variant_declaration
      (type_identifier)
      (type
        (type_identifier)))
    (enum_variant_declaration
      (type_identifier)))
  (trait_definition
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))
        (type
          (type_identifier)))))
  (function_definition
    (function_declaration
      (other_identifier)
      (type_parameters
        (type
          (type_identifier))
        (type
          (type_identifier)))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (type
        (type_identifier)))
    (block
      (variable_declaration
        (other_identifier)
        (field_expression
          (type
            (type_identifier)
            (type_parameters
              (type
                (type_identifier))))
          (call_expression
            (type
              (type_identifier))
            (call_arguments
              (int_literal)))))
      (statement
        (return_statement
          (other_identifier))))))

================================================================================
Implementation definition
================================================================================

impl Person:
    fn new(name Str) Person:
        Person(name)
    end

    fn greet(self):
        print(self.name)
    end
end

--------------------------------------------------------------------------------

(source_file
  (impl_definition
    (type
      (type_identifier))
    (function_definition
      (function_declaration
        (other_identifier)
        (function_parameter
          (other_identifier)
          (type
            (type_identifier)))
        (type
          (type_identifier)))
      (block
        (call_expression
          (type
            (type_identifier))
          (call_arguments
            (other_identifier)))))
    (function_definition
      (function_declaration
        (other_identifier)
        (function_parameter
          (self)))
      (block
        (call_expression
          (other_identifier)
          (call_arguments
            (field_expression
              (self)
              (other_identifier))))))))

================================================================================
Traits
================================================================================

trait Greeter:
    fn greet_every_one(self) (fn(Str) Str)

    fn greet(self) 

    fn with_default_impl(self):
        print("Hello")
    end
end

--------------------------------------------------------------------------------

(source_file
  (trait_definition
    (type
      (type_identifier))
    (function_declaration
      (other_identifier)
      (function_parameter
        (self))
      (type
        (function_type
          (type
            (type_identifier))
          (type
            (type_identifier)))))
    (function_declaration
      (other_identifier)
      (function_parameter
        (self)))
    (function_definition
      (function_declaration
        (other_identifier)
        (function_parameter
          (self)))
      (block
        (call_expression
          (other_identifier)
          (call_arguments
            (string_literal)))))))

================================================================================
Traits inside functions.
================================================================================

fn test():
    trait Greeter:
        fn greet(self) Str 
    end
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (trait_definition
        (type
          (type_identifier))
        (function_declaration
          (other_identifier)
          (function_parameter
            (self))
          (type
            (type_identifier)))))))

================================================================================
Trait implementation
================================================================================

impl Greeter<K> for Person<K>:
    fn greet(self):
        print(self.name)
    end
end

--------------------------------------------------------------------------------

(source_file
  (impl_definition
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (type
      (type_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (function_definition
      (function_declaration
        (other_identifier)
        (function_parameter
          (self)))
      (block
        (call_expression
          (other_identifier)
          (call_arguments
            (field_expression
              (self)
              (other_identifier))))))))

================================================================================
Enums
================================================================================

enum Color:
    Red
    Green
    Blue
    Yellow(Int, Int)
end

--------------------------------------------------------------------------------

(source_file
  (enum_declaration
    (type
      (type_identifier))
    (enum_variant_declaration
      (type_identifier))
    (enum_variant_declaration
      (type_identifier))
    (enum_variant_declaration
      (type_identifier))
    (enum_variant_declaration
      (type_identifier)
      (type
        (type_identifier))
      (type
        (type_identifier)))))

================================================================================
Field access
================================================================================

fn main():
    let a = person.name
    person.name = "John"
    person.name == "John"
    person.full_name().to_str().test
    Enum.Variant
    Enum<Type>.Variant<Type>(1)
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (variable_declaration
        (other_identifier)
        (field_expression
          (other_identifier)
          (other_identifier)))
      (statement
        (assignment_statement
          (field_expression
            (other_identifier)
            (other_identifier))
          (string_literal)))
      (binary_expression
        (field_expression
          (other_identifier)
          (other_identifier))
        (string_literal))
      (field_expression
        (call_expression
          (field_expression
            (call_expression
              (field_expression
                (other_identifier)
                (other_identifier))
              (call_arguments))
            (other_identifier))
          (call_arguments))
        (other_identifier))
      (field_expression
        (type
          (type_identifier))
        (type
          (type_identifier)))
      (call_expression
        (field_expression
          (type
            (type_identifier)
            (type_parameters
              (type
                (type_identifier))))
          (type
            (type_identifier)))
        (type_parameters
          (type
            (type_identifier)))
        (call_arguments
          (int_literal))))))

================================================================================
Pattern matching
================================================================================

fn main():
    match some_expression:
        'a'..<'z' => 1
        1 => 1
        'a' => 1
        "string" => 1
        true => 1
        [1, 2] => 1
        (1, 2) => 1
        1..10 => 1
        a => 1
        1 | 'a' | "string" => 1
        Struct{a: 1} => 1
        Enum => 1 
        Enum.Variant(1, _) => 1
        Enum(1 | 2..10 | 'a') => 1
        _:
            "a multi-expression block"
        end
    end
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (match_expression
        (other_identifier)
        (match_arm
          (pattern
            (range_pattern
              (range_pattern_literal
                (char_literal))
              (range_pattern_literal
                (char_literal))))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (int_literal))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (char_literal))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (string_literal))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (bool_literal))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (array_pattern
              (pattern
                (int_literal))
              (pattern
                (int_literal))))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (tuple_pattern
              (pattern
                (int_literal))
              (pattern
                (int_literal))))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (range_pattern
              (range_pattern_literal
                (int_literal))
              (range_pattern_literal
                (int_literal))))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (other_identifier))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (int_literal)
            (char_literal)
            (string_literal))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (struct_pattern
              (type
                (type_identifier))
              (struct_pattern_field
                (other_identifier)
                (pattern
                  (int_literal)))))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (enum_pattern
              (type
                (type_identifier))))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (enum_pattern
              (type
                (type_identifier))
              (type_identifier)
              (pattern
                (int_literal))
              (pattern
                (wildcard_pattern))))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (enum_pattern
              (type
                (type_identifier))
              (pattern
                (int_literal)
                (range_pattern
                  (range_pattern_literal
                    (int_literal))
                  (range_pattern_literal
                    (int_literal)))
                (char_literal))))
          (block
            (int_literal)))
        (match_arm
          (pattern
            (wildcard_pattern))
          (block
            (string_literal)))))))

================================================================================
Extern declaration
================================================================================

extern:
    fn a(s Str) Str
    fn b(b Int)
    struct Foo:
        a Int
    end
    impl Foo:
        fn new() Foo
    end
    impl ToStr for Foo
end

--------------------------------------------------------------------------------

(source_file
  (extern_declaration
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (type_identifier)))
      (type
        (type_identifier)))
    (function_declaration
      (other_identifier)
      (function_parameter
        (other_identifier)
        (type
          (type_identifier))))
    (struct_declaration
      (type
        (type_identifier))
      (struct_field
        (other_identifier)
        (type
          (type_identifier))))
    (extern_impl_declaration
      (type
        (type_identifier))
      (function_declaration
        (other_identifier)
        (type
          (type_identifier))))
    (extern_impl_declaration
      (type
        (type_identifier))
      (type
        (type_identifier)))))

================================================================================
Types don't clash with less-than operator.
================================================================================

fn test<T>():
    Foo<Int>{a: 1}
    test<Foo<Int>>(a < b)
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier)
      (type_parameters
        (type
          (type_identifier))))
    (block
      (struct_instantiation_expression
        (type
          (type_identifier)
          (type_parameters
            (type
              (type_identifier))))
        (struct_field_assignment
          (other_identifier)
          (int_literal)))
      (call_expression
        (other_identifier)
        (type_parameters
          (type
            (type_identifier)
            (type_parameters
              (type
                (type_identifier)))))
        (call_arguments
          (binary_expression
            (other_identifier)
            (other_identifier)))))))

================================================================================
Expression statement optional (`;`)
================================================================================

fn test():
    call() - x;
    y
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (expression_statement
        (binary_expression
          (call_expression
            (other_identifier)
            (call_arguments))
          (other_identifier)))
      (other_identifier))))

================================================================================
Parenthesized expression
================================================================================

fn test():
    (a + b) * c
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (binary_expression
        (parenthesized_expression
          (binary_expression
            (other_identifier)
            (other_identifier)))
        (other_identifier)))))

================================================================================
Propagate errors
================================================================================

fn test():
    divide(1, 0)!
end

--------------------------------------------------------------------------------

(source_file
  (function_definition
    (function_declaration
      (other_identifier))
    (block
      (call_expression
        (other_identifier)
        (call_arguments
          (int_literal)
          (int_literal))))))
